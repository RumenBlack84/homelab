---
- name: Linstor Configuration
  hosts: proxmox
  become: true
  vars_files:
    - vault/vault.yml
  vars:
    ansible_shell_executable: /bin/bash  # Use bash as the default shell
    ansible_ssh_pipelining: true
    default_storage_pool: DfltStorPool
    secondary_storage_pool: BulkPool
    nfs_allowed_ips: "192.168.0.0/24"
  pre_tasks:
    - name: Check if this host should even have this run
      ansible.builtin.meta: end_host
      when: not (linstor | default(false) | bool)
  tasks:
# This playbook is based off of https://linbit.com/blog/linstor-setup-proxmox-ve-volumes/
    - name: Download Linstor Public Repo Key
      ansible.builtin.get_url:
        url: "https://packages.linbit.com/package-signing-pubkey.asc"
        dest: /tmp/package-signing-pubkey.asc
        mode: '0755'

    - name: Import Linstor Repo key
      environment:
        TERM: xterm
      ansible.builtin.command: "gpg --yes -o /etc/apt/trusted.gpg.d/linbit-keyring.gpg --dearmor /tmp/package-signing-pubkey.asc"
      args:
        creates: /etc/apt/trusted.gpg.d/linbit-keyring.gpg

    - name: Overwrite linbit.list with LINBIT repository entry
      ansible.builtin.copy:
        content: |
          deb [signed-by=/etc/apt/trusted.gpg.d/linbit-keyring.gpg] http://packages.linbit.com/public/ proxmox-8 drbd-9
        dest: /etc/apt/sources.list.d/linbit.list
        owner: root
        group: root
        mode: '0644'

    - name: Install required LINSTOR and related packages on the controller nodes
      ansible.builtin.apt:
        name:
          - pve-headers
          - drbd-dkms
          - drbd-utils
          - linstor-controller
          - linstor-satellite
          - linstor-client
          - linstor-proxmox
          - drbd-reactor
          - targetcli-fb
          - nfs-common
          - nfs-kernel-server
          - resource-agents
          - git
          - golang
          - linstor-gui
          - jq
        state: present
        update_cache: true

    # insert relevant config files onto systems

    - name: Collect LINSTOR controller nodes
      ansible.builtin.set_fact:
        linstor_controllers: []

    - name: Add controllers to list
      ansible.builtin.set_fact:
        linstor_controllers: "{{ linstor_controllers + [item] }}"
      loop: "{{ groups['proxmox'] }}"
      when: hostvars[item].linstor_controller | default(false) | bool

    - name: Debug the linstor controllers var
      ansible.builtin.debug:
        var: linstor_controllers

    - name: Create LINSTOR client configuration file
      ansible.builtin.template:
        src: linstor-configs/linstor-client.conf.j2
        dest: /etc/linstor/linstor-client.conf
        owner: root
        group: root
        mode: '0644'

    - name: Create /etc/drbd-reactor.d directory
      ansible.builtin.file:
        path: /etc/drbd-reactor.d
        state: directory
        owner: root
        group: root
        mode: '0644'

    - name: Create DRBD Reactor configuration file
      ansible.builtin.template:
        src: linstor-configs/linstor_db.toml.j2
        dest: /etc/drbd-reactor.d/linstor_db.toml
        owner: root
        group: root
        mode: '0644'

    - name: Enable and start linstor-satellite service on all nodes
      ansible.builtin.systemd:
        name: linstor-satellite
        enabled: true
        state: started

    - name: Start linstor-controller service on the initial controller node
      ansible.builtin.systemd:
        name: linstor-controller
        state: started
      when: linstor_initial_controller | default(false) | bool

# Register all non-registered hosts to linstor

    - name: Report eligible Proxmox hosts into per-host fact
      ansible.builtin.set_fact:
        linstor_host_entry:
          "{{ {inventory_hostname: hostvars[inventory_hostname]['ansible_host']} }}"

    - name: Debug the list of Proxmox hosts to register
      ansible.builtin.debug:
        var: linstor_host_entry

    - name: Aggregate all LINSTOR hosts into a global dictionary
      ansible.builtin.set_fact:
        proxmox_hosts_to_register: "{{ ansible_play_hosts | map('extract', hostvars, 'linstor_host_entry') | select('defined') | list | combine }}"

    - name: Debug the list of Proxmox hosts to register
      ansible.builtin.debug:
        var: proxmox_hosts_to_register

    - name: Get list of registered LINSTOR nodes
      ansible.builtin.command: "linstor node list"
      register: linstor_node_list_raw
      when: linstor_initial_controller | default(false) | bool
      changed_when: false

    - name: Debug LINSTOR node list output
      ansible.builtin.debug:
        var: linstor_node_list_raw.stdout
      when: (linstor_initial_controller | default(false) | bool)

    - name: Parse LINSTOR node list and extract registered node names
      ansible.builtin.set_fact:
        linstor_registered_nodes: >-
          {{ linstor_node_list_raw.stdout_lines
            | select('search', '^\| (\S+)')
            | map('regex_replace', '^\| (\S+).*', '\1')
            | list }}
      when: (linstor_initial_controller | default(false) | bool)

    - name: Debug the variable
      ansible.builtin.debug:
        var: linstor_registered_nodes
      when: (linstor_initial_controller | default(false) | bool)

    - name: Remove already registered nodes from dictionary
      ansible.builtin.set_fact:
        proxmox_hosts_to_register: "{{ proxmox_hosts_to_register | dict2items | rejectattr('key', 'in', linstor_registered_nodes) | list | items2dict }}"
      when: (linstor_initial_controller | default(false) | bool)

    - name: Debug the variable
      ansible.builtin.debug:
        var: proxmox_hosts_to_register
      when: (linstor_initial_controller | default(false) | bool)

    - name: Register Proxmox hosts with LINSTOR
      ansible.builtin.command:
        cmd: "linstor node create --node-type combined {{ item.key }} {{ item.value }}"
      loop: "{{ proxmox_hosts_to_register | dict2items }}"
      when:
        - linstor_initial_controller | default(false) | bool
        - proxmox_hosts_to_register | length > 0  # âœ… Skip if empty
      changed_when: false

# Install linstor storages
    - name: Install Linstor storages
      ansible.builtin.include_tasks: tasks/linstor_storage.yml
      loop: "{{ hostvars[inventory_hostname].linstor_pools | default({}) | dict2items }}"
      loop_control:
        loop_var: item

# Time to make the controller DB HA following this documentation
# https://linbit.com/drbd-user-guide/linstor-guide-1_0-en/#s-linstor_ha
    - name: Get list of resource groups
      ansible.builtin.command: "linstor resource-group list -p"
      register: linstor_db_grp_raw
      changed_when: false
      when: (linstor_initial_controller | default(false) | bool)

    - name: Debug the variable
      ansible.builtin.debug:
        var: linstor_db_grp_raw
      when: (linstor_initial_controller | default(false) | bool)

    - name: Extract resource group names
      ansible.builtin.set_fact:
        linstor_db_grp: >-
          {{ linstor_db_grp_raw.stdout_lines
            | select('search', '^[|] \S+')
            | map('regex_replace', '^[|] (\S+).*', '\1')
            | list }}
      when: (linstor_initial_controller | default(false) | bool)

    - name: Debug the variable
      ansible.builtin.debug:
        var: linstor_db_grp
      when: (linstor_initial_controller | default(false) | bool)

    - name: Determine if resource group needs to be created
      ansible.builtin.set_fact:
        create_linstor_db_grp: "{{ 'linstor-db-grp' not in linstor_db_grp }}"
      when: (linstor_initial_controller | default(false) | bool)

    - name: Let's make the controller HA now, starting with a place to put the DB
      ansible.builtin.command: >
        linstor resource-group create
        --storage-pool {{ default_storage_pool }}
        --place-count 2
        --diskless-on-remaining
        linstor-db-grp
      when:
        - create_linstor_db_grp | default(false) | bool
        - (linstor_initial_controller | default(false) | bool)
      changed_when: false

    - name: Set resource group options so it will function properly with drbd reactor
      ansible.builtin.command: >
        linstor resource-group drbd-options
        --auto-promote=no
        --quorum=majority
        --on-suspended-primary-outdated=force-secondary
        --on-no-quorum=io-error
        --on-no-data-accessible=io-error
        linstor-db-grp
      when: linstor_initial_controller | default(false) | bool
      changed_when: false

    - name: Get list of volume-groups
      ansible.builtin.command: "linstor volume-group list RG-{{ default_storage_pool }}"
      register: linstor_volume_groups_raw
      changed_when: false
      when: (linstor_initial_controller | default(false) | bool)

    - name: Debug the variable
      ansible.builtin.debug:
        var: linstor_volume_groups_raw
      when: (linstor_initial_controller | default(false) | bool)

    - name: Extract volume group names
      ansible.builtin.set_fact:
        linstor_existing_volume_groups: >-
          {{ linstor_volume_groups_raw.stdout_lines
            | select('search', '^[|] \S+')
            | map('regex_replace', '^[|] (\S+).*', '\1')
            | list }}
      when: (linstor_initial_controller | default(false) | bool)

    - name: Debug the variable
      ansible.builtin.debug:
        var: linstor_existing_volume_groups
      when: (linstor_initial_controller | default(false) | bool)

    # Just checking to see if the Storage pool name shows up in the volume groups, that should be enough though.
    - name: Determine if volume group needs to be created
      ansible.builtin.set_fact:
        create_linstor_db_vol: "{{ '0' not in linstor_existing_volume_groups }}"
      when: linstor_initial_controller | default(false) | bool

    - name: Create volume group we can use on our new resource
      ansible.builtin.command: >
        linstor volume-group create linstor-db-grp
      when:
        - create_linstor_db_vol | default(false) | bool
        - (linstor_initial_controller | default(false) | bool)
      changed_when: false

# check if resource already exists before creating it
    - name: Get list of resources
      ansible.builtin.command: "linstor resource list -p"
      register: linstor_db_resource_raw
      changed_when: false
      when: (linstor_initial_controller | default(false) | bool)

    - name: Debug the variable
      ansible.builtin.debug:
        var: linstor_db_resource_raw
      when: (linstor_initial_controller | default(false) | bool)

    - name: Extract resource names
      ansible.builtin.set_fact:
        linstor_db_resource_exists: >-
          {{ linstor_db_resource_raw.stdout_lines
            | select('search', '^[|] \S+')
            | map('regex_replace', '^[|] (\S+).*', '\1')
            | list }}
      when: (linstor_initial_controller | default(false) | bool)

    - name: Debug the variable
      ansible.builtin.debug:
        var: linstor_db_resource_exists
      when: (linstor_initial_controller | default(false) | bool)

    # Just checking to see if the Storage pool name shows up in the volume groups, that should be enough though.
    - name: Determine if volume group needs to be created
      ansible.builtin.set_fact:
        create_linstor_db: "{{ 'linstor_db' not in linstor_db_resource_exists }}"
      when: (linstor_initial_controller | default(false) | bool)

    - name: Create a volume for our DB
      ansible.builtin.command: >
        linstor resource-group spawn-resources linstor-db-grp linstor_db 500M
      when:
        - create_linstor_db | default(false) | bool
        - (linstor_initial_controller | default(false) | bool)
      changed_when: false
# add back in needs some more logic, the failover it's causing is causing issues
#    - name: Disable and stop linstor-controller service on all nodes, we will be controlling it with drbd reactor later
#      ansible.builtin.systemd:
#        name: linstor-controller
#        enabled: false
#
#    - name: Stop and disable linstor-controller service on all nodes except the initial controller, we will be controlling it with drbd reactor later
#      ansible.builtin.systemd:
#        name: linstor-controller
#        enabled: false
#        state: stopped
#      when: (not linstor_initial_controller | default(false) | bool)

    - name: Create var-lib-linstor.mount file
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=Filesystem for the LINSTOR controller

          [Mount]
          # you can use the minor like /dev/drbdX or the udev symlink
          What=/dev/drbd/by-res/linstor_db/0
          Where=/var/lib/linstor
        dest: /etc/systemd/system/var-lib-linstor.mount
        owner: root
        group: root
        mode: '0644'

    - name: Check if backup directory exists
      ansible.builtin.stat:
        path: "/var/lib/linstor.orig"
      register: linstor_orig_stat
      when: linstor_initial_controller | default(false) | bool

    - name: Check if /var/lib/linstor is immutable
      ansible.builtin.command:
        cmd: "lsattr /var/lib/linstor"
      register: linstor_lsattr
      changed_when: false

    - name: Move existing LINSTOR database directory on current controller node
      ansible.builtin.command:
        cmd: "mv /var/lib/linstor /var/lib/linstor.orig"
        removes: /var/lib/linstor
      when:
        - linstor_initial_controller | default(false) | bool
        - "'--------------e------- /var/lib/linstor' not in linstor_lsattr.stdout"
        - linstor_orig_stat.stat.exists

    - name: Create new LINSTOR database directory on all to be controllers
      ansible.builtin.file:
        path: /var/lib/linstor
        state: directory
        mode: '0755'

    - name: Ensure /var/lib/linstor is immutable (chattr +i)
      ansible.builtin.command:
        cmd: "chattr +i /var/lib/linstor"
      when: ("'--------------e------- /var/lib/linstor' not in linstor_lsattr.stdout")
            and (linstor_controller | default(false) | bool)
      changed_when: false

    - name: Promote LINSTOR database DRBD resource to primary
      ansible.builtin.command:
        cmd: "drbdadm primary linstor_db"
      when: linstor_initial_controller | default(false) | bool
      changed_when: false

    - name: Check if DRBD volume is already formatted
      ansible.builtin.command: "blkid /dev/drbd/by-res/linstor_db/0"
      register: blkid_check
      failed_when: false
      changed_when: false
      ignore_errors: true

    - name: Format DRBD volume with ext4 if not already formatted
      ansible.builtin.command:
        cmd: "mkfs.ext4 /dev/drbd/by-res/linstor_db/0"
      when:
        - linstor_initial_controller | default(false) | bool
        - blkid_check.rc != 0  # Only format if `blkid` fails (no filesystem detected)
      changed_when: false

    - name: Start the var-lib-linstor.mount service
      ansible.builtin.systemd:
        daemon_reload: true
        name: var-lib-linstor.mount
        state: started
        enabled: true
      when: linstor_initial_controller | default(false) | bool

# This check might not work because it will find the lost+found dir i think
    - name: Check if LINSTOR data directory exists and is empty
      ansible.builtin.find:
        paths: "/var/lib/linstor"
        hidden: true
      register: linstor_data_check
      when: linstor_initial_controller | default(false) | bool

    - name: Restore LINSTOR data if directory is missing or empty
      ansible.builtin.command:
        cmd: "cp -r /var/lib/linstor.orig/* /var/lib/linstor/"
      when:
        - linstor_initial_controller | default(false) | bool
        - linstor_orig_stat.stat.exists | default(false) | bool
        - linstor_data_check.matched == 0 # Ensure target directory is empty
      changed_when: false  # Only marks as changed if command runs

    - name: Start LINSTOR controller service
      ansible.builtin.systemd:
        name: linstor-controller
        state: started
      when: linstor_initial_controller | default(false) | bool

    - name: Create /etc/systemd/system/linstor-satellite.service.d/ directory
      ansible.builtin.file:
        path: /etc/systemd/system/linstor-satellite.service.d/
        state: directory
        owner: root
        group: root
        mode: '0644'

    - name: Create override configuration file
      ansible.builtin.template:
        src: linstor-configs/override.conf.j2
        dest: /etc/systemd/system/linstor-satellite.service.d/override.conf
        owner: root
        group: root
        mode: '0644'

    - name: Create linstor_satellite.toml file
      ansible.builtin.template:
        src: linstor-configs/linstor_satellite.toml.j2
        dest: /etc/linstor/linstor_satellite.toml
        owner: root
        group: root
        mode: '0644'

# Work around for current debian issue with resource agents
# This is currently causing an issue with iptables rules not being removed when drbd-reactors are changing hosts:
# This was causing the VIP to fail for the DB config in my case as the rules got left in place
# Relevant issue https://github.com/LINBIT/linstor-gateway/issues/28
# This section can be removed when this issue is resolved
    - name: Clone the resource-agents repository
      ansible.builtin.git:
        repo: 'https://github.com/ClusterLabs/resource-agents.git'
        version: main
        dest: /tmp/resource-agents

    - name: Copy portblock script to /usr/lib/ocf/resource.d/heartbeat
      ansible.builtin.copy:
        src: /tmp/resource-agents/heartbeat/portblock
        dest: /usr/lib/ocf/resource.d/heartbeat/portblock
        remote_src: true
        mode: '0755'

    - name: Ensure the portblock script is executable
      ansible.builtin.file:
        path: /usr/lib/ocf/resource.d/heartbeat/portblock
        mode: '0755'
        state: file

# End of workaround section

    - name: Ensure nfs-server is disabled and stopped. It will be managed by our drbd-reactor configs
      ansible.builtin.systemd:
        name: nfs-server
        enabled: false
        state: stopped

# install linstor gateway
    - name: Install or Update linstor gateway
      ansible.builtin.include_tasks: tasks/install-update-linstor-gateway.yml

    - name: Create gateway service file
      ansible.builtin.template:
        src: linstor-configs/linstor-gateway.service.j2
        dest: /etc/systemd/system/linstor-gateway.service
        owner: root
        group: root
        mode: '0644'

# Add logic to check if it exsits first before running later on

# Commenting out for time being will add logic and correct later.
# I think this should actually be it's own loop defined in inventory

#    - name: Use linstor gateway to create HA nfs export on hdd storage pool
#      ansible.builtin.command: >
#        linstor-gateway nfs create nfs {{ vip_ip }}/24 15T
#        --allowed-ips={{ nfs_allowed_ips }}
#        --filesystem ext4
#        --resource-group=RG-{{ secondary_storage_pool }}
#      when: linstor_initial_controller | default(false) | bool
#      changed_when: true # remove once additional logic has been added

# comment out for now
#    - name: Add LINSTOR storage configurations to storage.cfg
#      ansible.builtin.blockinfile:
#        path: /etc/pve/storage.cfg
#        marker: "# {mark} ANSIBLE MANAGED BLOCK - LINSTOR STORAGE"
#        block: |
#          drbd: linstor_{{ default_storage_pool }}
#          content images,rootdir
#          controller {{ vip_ip }}
#          resourcegroup RG-{{ default_storage_pool }}
#
#          drbd: linstor_{{ secondary_storage_pool }}
#          content images,rootdir
#          controller {{ vip_ip }}
#          resourcegroup RG-{{ secondary_storage_pool }}
#        state: present

# Enable and start required systemd services
    - name: Enable and start linstor-satellite service
      ansible.builtin.systemd:
        daemon_reload: true
        name: linstor-satellite
        enabled: true
        state: started

    - name: Restart linstor-satellite service just in case it was already started
      ansible.builtin.systemd:
        name: linstor-satellite
        state: restarted

    - name: Enable and start drbd-reactor service
      ansible.builtin.systemd:
        name: drbd-reactor
        enabled: true
        state: started

    - name: Disable and stop linstor-gateway service it will be managed by drbd-reactor
      ansible.builtin.systemd:
        name: linstor-gateway
        enabled: false
        state: stopped

# Enable the services that will auto reload drbd-reactor when things get changed
    - name: Copy drbd-reactor-reload.path to /etc/systemd/system/
      ansible.builtin.copy:
        src: /usr/share/doc/drbd-reactor/examples/drbd-reactor-reload.path
        dest: /etc/systemd/system/drbd-reactor-reload.path
        remote_src: true
        mode: '0644'

    - name: Copy drbd-reactor-reload.service to /etc/systemd/system/
      ansible.builtin.copy:
        src: /usr/share/doc/drbd-reactor/examples/drbd-reactor-reload.service
        dest: /etc/systemd/system/drbd-reactor-reload.service
        remote_src: true
        mode: '0644'

    - name: Enable and start drbd-reactor-reload.path
      ansible.builtin.systemd:
        daemon_reload: true
        name: drbd-reactor-reload.path
        enabled: true
        state: started

# Restart proxmox services in order to have our drbd storages appear
    - name: Restart Proxmox services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
      loop:
        - pve-cluster
        - pvedaemon
        - pvestatd
        - pveproxy
        - pve-ha-lrm
