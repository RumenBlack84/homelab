- name: A series of tasks for proxmox maintenance and updates
  hosts: proxmox
  serial: 1  # âœ… Runs all tasks for one host before moving to the next
  remote_user: "{{ hostvars[inventory_hostname].ansible_user }}"
  vars_files:
    - vault/vault.yml
  vars:
    ansible_shell_executable: /bin/bash  # Use bash as the default shell
    ansible_ssh_pipelining: true
  tasks:
    - name: Upgrade all packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        autoremove: true

    - name: Update Oh my posh
      ansible.builtin.include_role:
        name: oh-my-posh-apt

    - name: Ensure nala is installed with alias
      ansible.builtin.include_role:
        name: nala

    - name: Update to latest linstor-gateway version
      ansible.builtin.include_role:
        name: linstor-gateway-git
      when: (hostvars[inventory_hostname].linstor | default(false) | bool)

    - name: Update to latest pve-fake-subscription version
      ansible.builtin.include_role:
        name: pve-fake-subscription-git

    - name: If the intel_sriov flag is set for host install latest sr-iov drivers
      ansible.builtin.include_role:
        name: intel-igpu-sriov-git
      when: (hostvars[inventory_hostname].intel_sriov | default(false) | bool)

    - name: Get running kernel version
      ansible.builtin.command: uname -r
      register: running_kernel
      changed_when: false

    - name: Debug running_kernel
      ansible.builtin.debug:
        msg: "Checking running_kernel: {{ running_kernel }}"

    - name: Get latest installed kernel version
      ansible.builtin.command: ls /usr/lib/modules
      register: installed_kernels
      changed_when: false

    - name: Debug installed_kernels
      ansible.builtin.debug:
        msg: "Checking installed_kernels: {{ installed_kernels }}"

    - name: Set latest kernel version (nat sorted)
      ansible.builtin.set_fact:
        latest_kernel: "{{ installed_kernels.stdout_lines | nat_sort(reverse=true) | first }}"

    - name: Debug latest_kernel
      ansible.builtin.debug:
        msg: "Checking latest_kernel: {{ latest_kernel }}"

    - name: Determine if new kernel is installed
      ansible.builtin.set_fact:
        new_kernel_installed: "{{ running_kernel.stdout != latest_kernel }}"

    - name: Debug latest_kernel
      ansible.builtin.debug:
        msg: "Checking new_kernel_installed: {{ new_kernel_installed }}"

    - name: Evict Linstor Resources
      ansible.builtin.include_role:
        name: evacuate-linstor-node
      when: (new_kernel_installed | default(false) | bool)

    - name: Evacuate Proxmox of all LXC & VMs
      ansible.builtin.include_role:
        name: evacuate-proxmox-node
      when: (new_kernel_installed | default(false) | bool)

    - name: Reboot the system
      ansible.builtin.reboot:
        reboot_timeout: 600  # Adjust the timeout depending on how long the system takes to reboot
        msg: "Rebooting the system now, waiting up to 600 seconds for it to be available again"
      when: (new_kernel_installed | default(false) | bool)
      register: reboot_result

    - name: Notify user of reboot completion
      ansible.builtin.debug:
        msg: "The system has rebooted and is back online."
      when: reboot_result is defined
