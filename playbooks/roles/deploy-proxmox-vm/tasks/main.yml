---
- name: Check if VM exists first
  delegate_to: localhost
  community.general.proxmox_vm_info:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ hostvars[inventory_hostname].proxmox_host }}"
    name: "{{ hostvars[inventory_hostname].inventory_hostname }}"
  register: vm_info
  ignore_errors: true  # ✅ Avoids playbook failure if container doesn't exist

- name: Debug vm_info
  delegate_to: localhost
  ansible.builtin.debug:
    msg: "Checking if VM exists: {{ vm_info }}"

- name: Set a fact for VM existence
  delegate_to: localhost
  ansible.builtin.set_fact:
    vm_exists: "{{ (not vm_info.failed | default(false)) | bool }}"

- name: Debug vm_exists
  delegate_to: localhost
  ansible.builtin.debug:
    msg: "VM Exists: {{ vm_exists }}"

- name: Check if the Clone template exists and get its stats
  delegate_to: localhost
  community.general.proxmox_vm_info:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ hostvars[inventory_hostname].proxmox_host }}"
    name: "{{ hostvars[inventory_hostname].template }}"
  register: clone_info

- name: Debug clone_info
  delegate_to: localhost
  ansible.builtin.debug:
    msg: "Checking if the Clone Template exists: {{ clone_info }}"

- name: Save hostvars as shorter vars to prevent line too long errors later on
  delegate_to: localhost
  ansible.builtin.set_fact:
    bridge: "{{ hostvars[inventory_hostname].interface }}"
    subnet: "{{ hostvars[inventory_hostname].subnet }}"
    ip: "{{ hostvars[inventory_hostname].ansible_host }}"
    gw: "{{ hostvars[inventory_hostname].gateway }}"

- name: Set ipconfig0 string
  ansible.builtin.set_fact:
    ipconfig0_string: "ip={{ ip }}{{ subnet }},gw={{ gw }}"

- name: Debug ipconfig0 string
  ansible.builtin.debug:
    msg: "ipconfig0_string is: {{ ipconfig0_string }}"

- name: Clone VM with source vmid and target newid and raw format
  delegate_to: localhost
  community.general.proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ hostvars[inventory_hostname].proxmox_host }}"
    clone: "{{ hostvars[inventory_hostname].template }}"
    name: "{{ hostvars[inventory_hostname].inventory_hostname }}"
    node: "{{ clone_home }}"
    target: "{{ hostvars[inventory_hostname].proxmox_host }}"
    storage: "{{ hostvars[inventory_hostname].storage }}"
    timeout: 300
  register: clone_result
  when:
    - (hostvars[inventory_hostname].vm | default(false) | bool)
    - not (vm_exists | default(true) | bool)

- name: Set VMID if VM already exsits
  set_fact:
    vmid: "{{ vm_info.proxmox_vms[0].vmid }}"
  when:
    - not (vm_exists | default(false) | bool)

- name: Set VMID if VM doesnt exist
  set_fact:
    vmid: "{{ clone_result.vmid }}"
  when:
    - not (vm_exists | default(false) | bool)

- name: Debug VMID
  ansible.builtin.debug:
    msg: "New vmid: {{ vmid }}"

- name: Set target node if VM already exists
  set_fact:
    proxmox_node: "{{ vm_info.proxmox_vms[0].node }}"
  when:
    - (vm_exists | default(false) | bool)

- name: Record VM status
  set_fact:
    vm_status: "{{ vm_info.proxmox_vms[0].status }}"
  when:
    - (vm_exists | default(false) | bool)

- name: Set target node if VM doesnt exist
  set_fact:
    proxmox_node: "{{ hostvars[inventory_hostname].proxmox_host }}"
  when:
    - not (vm_exists | default(false) | bool)

# Ensure values match inventory some of these cannot be added on clone
- name: Update VM settings after clone
  delegate_to: localhost
  community.general.proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ hostvars[inventory_hostname].proxmox_host }}"
    name: "{{ hostvars[inventory_hostname].inventory_hostname }}"
    node: "{{ proxmox_node }}"
    cpuunits: "{{ hostvars[inventory_hostname].cpuunits | default(100) | int }}"
    tags: "{{ hostvars[inventory_hostname].proxmox_tags | default([]) }}"
    sshkeys: "{{ ssh.pub_key }}"
    memory: "{{ hostvars[inventory_hostname].memory }}"
    sockets: "{{ hostvars[inventory_hostname].sockets | default(omit) }}"
    cores: "{{ hostvars[inventory_hostname].cores | default(omit) }}"
    vcpus: "{{ hostvars[inventory_hostname].vcpus | default(omit) }}"
    ciupgrade: true
    ciuser: "{{ hostvars[inventory_hostname].ansible_user }}"
    cipassword: "{{ cloudinit.ci_password }}"
    ipconfig:
      ipconfig0: "{{ ipconfig0_string }}"
    citype: "nocloud"
    update: true

- name: Attempt to resize disk
  block:
    - name: Update existing disk
      delegate_to: localhost
      community.general.proxmox_disk:
        api_user: "{{ proxmox.api_user }}"
        api_password: "{{ proxmox.api_password }}"
        api_host: "{{ proxmox_node }}"
        name: "{{ hostvars[inventory_hostname].inventory_hostname }}"
        disk: scsi0
        size: "{{ hostvars[inventory_hostname].size }}"
        backup: true
        state: resized
      register: resize_disk_info
  rescue:
    - name: Handle disk resize failure gracefully
      debug:
        msg: |
          Disk resize failed — continuing anyway.
          Resize Disk Result: {{ resize_disk_info }}"

- name: Start VM
  delegate_to: localhost
  community.general.proxmox_kvm:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ proxmox_node }}"
    name: "{{ hostvars[inventory_hostname].inventory_hostname }}"
    state: started
  when:
    - vm_status is defined
    - "'running' not in vm_status"


- name: Wait for the VM to be fully Deployed
  delegate_to: localhost
  ansible.builtin.wait_for:
    timeout: 120 # values a bit high but *shrug* just in case
  when:
    - vm_status is defined
    - "'running' not in vm_status"
