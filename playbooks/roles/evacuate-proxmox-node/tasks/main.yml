---
- name: Get list of VMs
  delegate_to: localhost
  community.general.proxmox_vm_info:
    api_user: "{{ proxmox.api_user }}"
    api_password: "{{ proxmox.api_password }}"
    api_host: "{{ hostvars[inventory_hostname] }}"
    node: "{{ hostvars[inventory_hostname].proxmox_host }}"
    validate_certs: false
  register: vms_on_host

- name: Debug vms_on_host
  delegate_to: localhost
  ansible.builtin.debug:
    msg: "Checking vms_on_host : {{ vms_on_host }}"
  failed_when: true # I want to fail here to check output for now

- name: Shutdown VMs tagged immobile
  block:
    - name: Shutdown immobile VMs
      delegate_to: localhost
      community.general.proxmox_kvm:
        api_user: "{{ proxmox.api_user }}"
        api_password: "{{ proxmox.api_password }}"
        api_host: "{{ hostvars[inventory_hostname].proxmox_host }}"
        validate_certs: false
        vmid: "{{ item.vmid }}"
        state: stopped
      loop: "{{ vms_on_host.virtual_machines }}"
      when: >
        (item.tags is defined) and
        ('immobile' in item.tags | regex_findall('[^,]+'))

- name: Migrate mobile VMs
  block:
    - name: Gather fresh node info
      delegate_to: localhost
      community.general.proxmox_node_info:
        api_user: "{{ proxmox.api_user }}"
        api_password: "{{ proxmox.api_password }}"
        api_host: "{{ hostvars[inventory_hostname].proxmox_host }}"
        validate_certs: false
      register: fresh_node_info

    - name: Set best node fact
      set_fact:
        best_node: >-
          {{ (fresh_node_info.nodes
              | rejectattr('node', 'equalto', hostvars[inventory_hostname].proxmox_host)
              | selectattr('status', 'equalto', 'online')
              | sort(attribute='mem')
              | map(attribute='node')
              | list).0 }}

    - name: Migrate each mobile VM
      delegate_to: localhost
      community.general.proxmox_kvm:
        api_user: "{{ proxmox.api_user }}"
        api_password: "{{ proxmox.api_password }}"
        api_host: "{{ hostvars[inventory_hostname].proxmox_host }}"
        validate_certs: false
        name: "{{ item.name }}"
        node: "{{ hostvars[inventory_hostname].proxmox_host }}"
        migrate: true
        target_node: "{{ best_node }}"
      loop: "{{ vms_on_host.virtual_machines }}"
      loop_control:
        label: "{{ item.name }}"
      when: >
        (item.tags is not defined) or
        ('immobile' not in item.tags | regex_findall('[^,]+'))
