---
- name: Try to get list of LXCs
  block:
    - name: Get list of LXCs
      delegate_to: localhost
      community.general.proxmox_vm_info:
        api_user: "{{ proxmox.api_user }}"
        api_password: "{{ proxmox.api_password }}"
        api_host: "{{ inventory_hostname }}"
        node: "{{ inventory_hostname }}"
        validate_certs: false
        type: lxc
      register: lxcs_on_host
      async: 30
      poll: 5

  rescue:
    - name: Set empty lxcs_on_host on failure
      ansible.builtin.set_fact:
        lxcs_on_host:
          proxmox_vms: []

- name: Stop all LXCs with pct if we cannot do it through api
  ansible.builtin.shell: |
    set -o pipefail && for ct in $(pct list | awk 'NR>1 {print $1}'); do
      pct shutdown "$ct"
    done
  args:
    executable: /bin/bash
  when: not (lxcs_on_host.proxmox_vms | length > 0)
  changed_when: false

- name: Debug lxcs_on_host
  delegate_to: localhost
  ansible.builtin.debug:
    msg: "Checking lxcs_on_host : {{ lxcs_on_host }}"

- name: Shutdown lxcs tagged immobile
  when: (lxcs_on_host.proxmox_vms | length > 0)
  block:
    - name: Shutdown immobile lxcs
      delegate_to: localhost
      community.general.proxmox:
        api_user: "{{ proxmox.api_user }}"
        api_password: "{{ proxmox.api_password }}"
        api_host: "{{ inventory_hostname }}"
        validate_certs: false
        vmid: "{{ item.vmid }}"
        state: stopped
      loop: "{{ lxcs_on_host.proxmox_vms }}"
      when: >
        (item.tags is defined) and
        ('immobile' in (item.tags | regex_findall('[^,;]+'))) and

- name: Migrate LXCs
  when: (lxcs_on_host.proxmox_vms | length > 0)
  block:
    - name: Gather fresh node info
      delegate_to: localhost
      community.general.proxmox_node_info:
        api_user: "{{ proxmox.api_user }}"
        api_password: "{{ proxmox.api_password }}"
        api_host: "{{ inventory_hostname }}"
        validate_certs: false
      register: fresh_node_info

    - name: Debug fresh_node_info
      delegate_to: localhost
      ansible.builtin.debug:
        msg: "The Fresh Node Info : {{ fresh_node_info }}"

    - name: Set best node fact
      set_fact:
        best_node: >-
          {{ (fresh_node_info.proxmox_nodes
              | rejectattr('node', 'equalto', inventory_hostname)
              | selectattr('status', 'equalto', 'online')
              | sort(attribute='mem')
              | map(attribute='node')
              | list).0 }}

    - name: Debug best_node
      delegate_to: localhost
      ansible.builtin.debug:
        msg: "The best node is : {{ best_node }}"

    - name: Migrate LXC containers manually with pct
      shell: >
        pct migrate {{ item.vmid }} {{ best_node }} --online
      args:
        executable: /bin/bash
      loop: "{{ lxcs_on_host.proxmox_vms }}"
      loop_control:
        label: "{{ item.name }}"
      changed_when: false
      when: >
        (item.tags is not defined) or
        ('immobile' not in (item.tags | regex_findall('[^,;]+')))

- name: Try to get list of VMs
  block:
    - name: Get list of VMs
      delegate_to: localhost
      become: false
      community.general.proxmox_vm_info:
        api_user: "{{ proxmox.api_user }}"
        api_password: "{{ proxmox.api_password }}"
        api_host: "{{ inventory_hostname }}"
        node: "{{ inventory_hostname }}"
        validate_certs: false
        type: qemu
      register: vms_on_host
      async: 30
      poll: 5

  rescue:
    - name: Set empty vms_on_host on failure
      ansible.builtin.set_fact:
        vms_on_host:
          proxmox_vms: []

- name: Stop all VMs with qm if we cannot do it through api
  ansible.builtin.shell: |
    set -o pipefail && for vm in $(qm list | awk 'NR>1 {print $1}'); do
      qm shutdown "$vm"
    done
  args:
    executable: /bin/bash
  when: not (vms_on_host.proxmox_vms | length > 0)
  changed_when: false


- name: Debug vms_on_host
  delegate_to: localhost
  ansible.builtin.debug:
    msg: "Checking vms_on_host : {{ vms_on_host }}"

- name: Shutdown VMs tagged immobile
  when: vms_on_host.proxmox_vms | length > 0
  block:
    - name: Shutdown immobile VMs
      delegate_to: localhost
      community.general.proxmox_kvm:
        api_user: "{{ proxmox.api_user }}"
        api_password: "{{ proxmox.api_password }}"
        api_host: "{{ inventory_hostname }}"
        validate_certs: false
        vmid: "{{ item.vmid }}"
        state: stopped
      loop: "{{ vms_on_host.proxmox_vms }}"
      when: >
        (item.tags is defined) and
        ('immobile' in (item.tags | regex_findall('[^,;]+')))

- name: Migrate mobile VMs
  when: vms_on_host.proxmox_vms | length > 0
  block:
    - name: Gather fresh node info
      delegate_to: localhost
      community.general.proxmox_node_info:
        api_user: "{{ proxmox.api_user }}"
        api_password: "{{ proxmox.api_password }}"
        api_host: "{{ inventory_hostname }}"
        validate_certs: false
      register: fresh_node_info

    - name: Debug fresh_node_info
      delegate_to: localhost
      ansible.builtin.debug:
        msg: "The Fresh Node Info : {{ fresh_node_info }}"

    - name: Set best node fact
      set_fact:
        best_node: >-
          {{ (fresh_node_info.proxmox_nodes
              | rejectattr('node', 'equalto', inventory_hostname)
              | selectattr('status', 'equalto', 'online')
              | sort(attribute='mem')
              | map(attribute='node')
              | list).0 }}

    - name: Debug best_node
      delegate_to: localhost
      ansible.builtin.debug:
        msg: "The best node is : {{ best_node }}"

    - name: Migrate each mobile VM
      delegate_to: localhost
      community.general.proxmox_kvm:
        api_user: "{{ proxmox.api_user }}"
        api_password: "{{ proxmox.api_password }}"
        api_host: "{{ inventory_hostname }}"
        validate_certs: false
        name: "{{ item.name }}"
        node: "{{ best_node }}"
        migrate: true
        timeout: 300 # 5 minutes for now, should be plenty
      loop: "{{ vms_on_host.proxmox_vms }}"
      loop_control:
        label: "{{ item.name }}"
      when: >
        (item.tags is not defined) or
        ('immobile' not in (item.tags | regex_findall('[^,;]+')))
